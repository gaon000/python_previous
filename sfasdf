# from urllib.request import urlopen
# from bs4 import BeautifulSoup
#
#
# url = "https://www.rottentomatoes.com/"
# html = urlopen(url)
# source = html.read() # 바이트코드 type으로 소스를 읽는다.
# html.close() # urlopen을 진행한 후에는 close를 한다.
#
# soup = BeautifulSoup(source, "html5lib") # 파싱할 문서를 BeautifulSoup 클래스의 생성자에 넘겨주어 문서 개체를 생성, 관습적으로 soup 이라 부름
# table = soup.find(id="Top-Box-Office")
# movies = table.find_all(class_="middle_col")
#
# for movie in movies:
#     title = movie.get_text()
#     print(title, end=' ')
#     link = movie.a.get('href')
#     url = 'https://www.rottentomatoes.com' + link
#     print(url)

# from urllib.request import urlopen
# from threading import Thread
# from time import sleep
#
#
# def printResult():
#     while True:
#         print("hello")
#         html = urlopen("http://www.naver.com/")
#         print(html.read())
#
#         # if you want to change cycle from 1 second to 3 second please change here to '3'.
#         sleep(3)
#
#
# def main():
#     th = Thread(target=printResult)
#     th.demon = True
#     th.start()
#
#
# if __name__ == '__main__':
#     main()
# from networksim import NetworkSimulator
# from beacon_chain_node import Node, NOTARIES, SHARDS, BeaconBlock, MainChainBlock, ShardCollation, main_genesis, \
#     beacon_genesis
#
# net = NetworkSimulator(latency=19)
# notaries = [Node(i, net, sleepy=i % 5 == 9) for i in range(NOTARIES)]
# net.agents = notaries
# net.generate_peers()
# for i in range(2000):
#     net.tick()
# for n in notaries:
#     print("Beacon head: %d" % n.blocks[n.beacon_chain[-1]].number)
#     print("Main chain head: %d" % n.blocks[n.main_chain[-1]].number)
#     print("Shard heads: %r" % [n.blocks[x[-1]].number for x in n.shard_chains])
#     print("Total beacon blocks received: %d" % (len([b for b in n.blocks.values() if isinstance(b, BeaconBlock)]) - 1))
#     print("Total beacon blocks received and signed: %d" % (
#                 len([b for b in n.blocks.keys() if b in n.sigs and len(n.sigs[b]) >= n.blocks[b].notary_req]) - 1))
#     print("Total main chain blocks received: %d" % (
#                 len([b for b in n.blocks.values() if isinstance(b, MainChainBlock)]) - 1))
#     print("Total shard blocks received: %r" % [
#         len([b for b in n.blocks.values() if isinstance(b, ShardCollation) and b.shard_id == i]) - 1 for i in
#         range(SHARDS)])
#
# import matplotlib.pyplot as plt
# import networkx as nx
# import random
#
# G = nx.Graph()
#
# # positions = {main_genesis.hash: 0, beacon_genesis.hash: 0}
# # queue = [
#
# for b in n.blocks.values():
#     if b.number > 0:
#         if isinstance(b, BeaconBlock):
#             G.add_edge(b.hash, b.main_chain_ref, color='g')
#             G.add_edge(b.hash, b.parent_hash, color='y')
#         elif isinstance(b, MainChainBlock):
#             G.add_edge(b.hash, b.parent_hash, color='b')
#         elif isinstance(b, ShardCollation):
#             G.add_edge(b.hash, b.beacon_ref, color='g')
#             G.add_edge(b.hash, b.parent_hash, color='r')
#
#
# def mkoffset(b):
#     return random.randrange(5) + \
#            (5 if isinstance(b, MainChainBlock) else
#             0 if isinstance(b, BeaconBlock) else
#             -5 - 5 * b.shard_id if isinstance(b, ShardCollation) else
#             None)
#
#
# pos = {b.hash: (b.ts + mkoffset(b), b.ts) for b in n.blocks.values()}
# edges = G.edges()
# colors = [G[u][v]['color'] for u, v in edges]
# nx.draw_networkx_nodes(G, pos, node_size=10, node_shape='o', node_color='0.75')
#
# nx.draw_networkx_edges(G, pos,
#                        width=2, edge_color=colors)
#
# plt.axis('off')
# # plt.savefig("degree.png", bbox_inches="tight")
# plt.show()
